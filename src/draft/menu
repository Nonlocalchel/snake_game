 from src.interface.infrastructure import Infrastructure
 from src.pages.display import Display

 from src.pages.actions import *


 class Menu(Display):
     """Контролирует цикл меню"""

     def __init__(self, infrastructure: Infrastructure) -> None:
         self.infrastructure = infrastructure
         self.is_running = True
         # self.elements = {'buttons': {}, 'input': None}

     def process_events(self) -> None:
         """Обработка ввода от пользователя"""
         if self.infrastructure.is_quit_event():
             self.is_running = False

         buttons = self.menu.buttons
         if buttons and not self.menu.lock:
             coords = {button: button.abs_position for button in buttons}
             selected_element = self.infrastructure.check_mouse(coords)

             if selected_element:
                 self.action = selected_element.click

         name_input = self.elements['input']
         if self.menu.lock:
             self.infrastructure.get_pressed_char()

     def render(self) -> None:
         """Обновление экрана: перерисовка меню"""
         self.infrastructure.fill_bg(image='gold_snake.jpg')


         menu_buttons = self.elements['buttons'].get('menu')
         if not menu_buttons:
             menu_buttons = self.infrastructure.get_buttons(
                 {'Играть': test, 'Cтатистика': say_hello, 'Выход': quit}
             )
             self.elements['buttons']['menu'] = menu_buttons
         self.infrastructure.draw_menu(menu_buttons)

         if self.screen_lock:
             start_button = self.elements['buttons'].get('start')
             if not start_button:
                 start_button = self.infrastructure.get_buttons(
                     {'Старт': say_hello}
                 )
                 self.elements['buttons']['start'] = start_button
             self.infrastructure.draw_settings(start_button)

      self.infrastructure.update_and_tick()

    def update_state(self) -> None:

     buttons = self.elements['buttons']
     start_buttons = buttons.get('start')
     if start_buttons:
         menu_buttons = buttons.get('menu')
         if self.screen_lock:
             self.infrastructure.set_access(start_buttons, lock=menu_buttons)
             return

        self.infrastructure.set_access(menu_buttons, lock=start_buttons)

     if self.action:
         print(self.action(2))

